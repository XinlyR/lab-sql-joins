#1.List the number of films per category.
SELECT c.category_id, COUNT(f.film_id) AS number_of_films
FROM sakila.film AS f
JOIN sakila.film_category AS c
ON f.film_id = c.film_id
GROUP BY c.category_id;

#2.Retrieve the store ID, city, and country for each store. 
SELECT s.store_id, c.city, cc.country
FROM sakila.store AS s
JOIN sakila.address AS a
ON s.address_id = a.address_id
JOIN sakila.city AS c
ON a.city_id = c.city_id
JOIN sakila.country AS cc
ON c.country_id = cc.country_id;

#3. Calculate the total revenue generated by each store in dollars.
SELECT s.store_id, SUM(p.amount) AS total_revenue
FROM sakila.store AS s
JOIN sakila.staff AS st
ON s.store_id = st.store_id
JOIN sakila.payment AS p
ON st.staff_id = p.staff_id
GROUP BY s.store_id;

#4.Determine the average running time of films for each category.
SELECT c.name AS category_name, AVG(f.length) AS average_length
FROM sakila.film AS f
JOIN sakila.film_category AS fc 
ON f.film_id = fc.film_id
JOIN sakila.category AS c 
ON fc.category_id = c.category_id
GROUP BY c.name;

#Bonus:
#5.Identify the film categories with the longest average running time.
SELECT c.name AS category_name, AVG(f.length) AS average_length
FROM sakila.film AS f
JOIN sakila.film_category AS fc 
ON f.film_id = fc.film_id
JOIN sakila.category AS c 
ON fc.category_id = c.category_id
GROUP BY c.name
ORDER BY average_length DESC
LIMIT 1;

#6 Display the top 10 most frequently rented movies in descending order.
SELECT f.title, COUNT(r.rental_id) AS rental_count
FROM sakila.rental AS r
JOIN sakila.inventory AS i 
ON r.inventory_id = i.inventory_id
JOIN sakila.film AS f 
ON i.film_id = f.film_id
GROUP BY f.title
ORDER BY rental_count DESC
LIMIT 10;

#7.Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT i.inventory_id, 
       IF(r.rental_id IS NULL, 'Available', 'Rented') AS availability
FROM sakila.film AS f
JOIN sakila.inventory AS i 
ON f.film_id = i.film_id
LEFT JOIN sakila.rental AS r 
ON i.inventory_id = r.inventory_id AND r.return_date IS NULL
WHERE f.title = 'Academy Dinosaur' 
AND i.store_id = 1;

#8. Provide a list of all distinct film titles, along with their availability status in the inventory. 
#Include a column indicating whether each title is 'Available' or 'NOT available.' 
#Note that there are 42 titles that are not in the inventory, and this information can be obtained 
#using a CASE statement combined with IFNULL."
SELECT 
    f.title AS film_title,
    CASE 
        WHEN IFNULL(i.inventory_id, 0) = 0 THEN 'NOT Available'
        ELSE 'Available'
    END AS availability_status
FROM 
    sakila.film AS f
LEFT JOIN 
    sakila.inventory AS i
ON 
    f.film_id = i.film_id
ORDER BY 
    availability_status DESC, f.title;








